2022-03-07

** 웹 애플리케이션 이해 **
	1. 웹 서버, 웹 애플리케이션 서버
		.- 

	2. 서블릿
		.- 

2022-03-09

	3. 동시 요청 - 멀티 쓰레드
		.- 서블릿 객체를 누가 호출하지?? ---> '쓰레드'가 호출
		.- 쓰레드란?
			1_ 애플리케이션 코드를 하나하나 순차적으로 실행하는 것은 쓰레드
			2_ 자바 main메소드는 main이라는 쓰레드가 실행된다고 생각하면 됨
			3_ 쓰레드는 한번에 한개씩 호출

		.- 요청마다 쓰레드를 생성할 시 장단점
			1_ 장점
				.- 동시 요청을 처리 가능
				.- 리소스가 허용하는 범위 안까지 처리 가능
				.- 하나의 쓰레드가 지연되어도 다른 쓰레드에 지장이 없음
			2_ 단점
				.- 비용이 비싸고 응답속도가 늦어질 수 있음
				.- 컨텍스트 스위칭 비용이 발생
				.- 요청이 많을 시 cpu, 메모리 임계점을 넘어서 서버가 죽음 (== 쓰레드 생성에 제한이 없음)

		.- 쓰레드 풀
			.- 쓰레드가 필요할 시, 이미 생성된 쓰레드를 쓰레드 풀에서 꺼내서 사용
			.- 쓰레드 풀의 허용범위가 넘을 시 쓰레드 대기, 거절 (톰캣은 최대 200개가 기본 설정이고 변경 o)
			.- 사용을 종료하면 쓰레드 풀에 해당 쓰레드를 반납
			.- 장점
				1_ 쓰레드가 미리 생성되어 있기 때문에 효율이 좋고 응답시간이 빠름
				2_ 너무 많은 요청이 들어와도 기존 요청은 안전하게 처리가 가능
			-. 실무 팁
				1_ WAS의 주요 튜닝 포인트는 최대 쓰레드(max thread) 수 이다.
				2_ 최대 쓰레드 수가 너무 낮거나 높으면 효율이 좋지 못함
				3_ 장애 발생시 클라우드면 일단 서버부터 늘리고 튜닝, 클라우드가 아닐 시 열심히 튜닝
			.- 쓰레드 풀의 적정 숫자는?
				1_ 애플리케이션 로직의 복잡도, cpu, 메모리, IO 리소스 상황에 따라 다 다름...
				2_ 성능 테스트가 필요함 (툴 : 아파치ab, 제이미터, nGrinder등등)

		.- WAS의 멀티 쓰레드 지원의 핵심
			.- 멀티 쓰레드에 대한 부분은 WAS가 처리 ==> ** 개발자가 멀티 쓰레드 관련 코드를 신경쓰지 않아도 됨 **
			.- 편리하게 개발하되 싱글톤 객체(서블릿, 스프링 빈)는 주의해서 사용...

	4. HTML, HTTP, API, CSR, SSR
		1_ HTML
			.- 정적 리소스 (html, css, js, 이미지, 영상등..) 
			.- HTML 페이지 

			.- HTTP API
				.- HTML이 아니라 데이터를 전달
				.- 주로 JSON 형식 사용
				.- 다양한 시스템에서 호출
				.- 데이터만 주고 받음, UI화면이 필요하면 클라이언트가 별도로 처리
				.- 앱, 웹 클라이언트, 서버 to 서버

			.- HTTP API 다양한 시스템 연동
				.- 주로 JSON 형태로 데이터 통신
				.- UI 클라이언트 접점
					.- 앱 클라이언트 (아이폰, 안드로이드, PC 앱)
					.- 웹 브라우저에서 자바스크립트를 통한 HTTP API 호출
					.- 리액트, 뷰 같은 웹 클라이언트
				.- 서버 to 서버
					.- 주문 서버 -> 결제 서버
					.- 기업간 데이터 통신


		2_ SSR - 서버 사이드 랜더링
			.- 서버에서 최종 HTML을 생성해서 클라이언트에 전달
			.- 주로 정적인 화면에 사용
			.- 관련기술 : JSP, 타임리프 -> 백앤드 개발자!!

		3_ CSR -  클라이언트 사이드 랜더링
			.- HTML 결과를 자바스크립트를 이용해 웹 브라우저에서 동적으로 생성해서 적용
			.- 주로 동적인 화면에 사용, 웹 환경을 마치 앱 처럼 필요한 부분부분 변경할 수 있음
			.- 예_ 구글 지도, Gmail, 구글 캘린더
			.- 관련기술 : React, Vue.js -> 프론트 개발자 !!

		** 참고
			.- React, Vue.js를 CSR + SSR 동시에 지원하는 웹 프래임워크도 존재
			.- SSR을 사용하더라도, JS를 사용해서 화면 일부를 동적으로 변경 가능

		4_ 백엔드 개발자 입장에서 UI 기술 어디까지 알면 좋을까?
			.- 백엔드 - 서버 사이드 랜더링 기술
				.- JSP, 타임리프
				.- 화면이 정적이고, 복잡하지 않을 때 사용
				.- 백엔드 개발자는 서버 사이드 랜더링 기술 학습 필수!!!

			.- 웹 프론트엔드 - 클라이언트 사이드 랜더링 기술
				.- 리액트, 뷰
				.- 복잡하고 동적인 UI 사용
				.- 웹 프론트앤드 개발자의 전문 분야
			.- 백엔드 개발자에게 있어서 CSR은 옵션!! (서버, DB, 인프라등등 많은 기술을 먼저 알아야 하겠지?)


	5. 자바의 역사
		1_ 스프링 웹 기술의 분화
			.- Web Servlet - Spring MVC
			.- Web Reactive - Spring WebFlux

		2_ HTML을 편리하게 생성하는 뷰 기능
			.- JSP
				.- 속도 느림, 기능 부족
			.- 프리마커(Freemarker), 벨로시티(Velocity)
				.- 속도 문제 해결, 다양한 기능
			.- 타임리프(Thymeleaf)
				.- 내추럴 탬플릿 : HTML의 모양을 유지하면서 뷰 템플릿 적용 가능
				.- 스프링 MVC와 강력한 기능 통합
				.- 최선의 선택...!


** 웹 애플리케이션 이해 종료 **

** 서블릿 **
	1. 프로젝트 생성
		.- 보통은 Jar파일로 하면되는데 JSP공부 때문에 War파일로 생성
		.- 설치관련은 이제 어렵진 않고 환경설정도 lombok이랑 annotation이랑 gradle만 바꿔주면 되니까 아직은 쉬움

2022-03-10

	2. Hello 서블릿
		.- 메인 메소드에 @ServletComponentScan를 추가 ==> 서블릿 자동 등록을 위해서
		.- HelloServlet class에 extends HttpServlet추가, @WebServlet(name = "helloServlet", urlPatterns = "/hello") 추가
							.- /hello라는 url요청 시 helloServlet이라는 class로 ㄱㄱ

		.- ctrl + o 누르고 service검색해서 자물쇠 잠긴거 누르면 오버라이딩 자동으로 됨
		.- 첨에 변수명 req, resp로 되어있는거 request, response로 변경

		.- request.getParameter("username"); 알고
		.- response.setContentType("text/plain"); 헤더에 들어가는 타입
        		.- response.setCharacterEncoding("utf-8"); 헤더에 들어가서 한글 인코딩
        		.- response.getWriter().write("hello " + username); body에 출력

		** HTTP 요청 메세지 로그 확인하기 **
		.- application.properties에 logging.level.org.apache.coyote.http11=debug 추가
		.- 참고로 개발서버에서쓰지 운영서버에선 쓰지않음

	3. HttpServletRequest -  개요
		.- 서블릿은 개발자가 HTTP 요청 메시지를 편리하게 사용할 수 있도록 개발자 대신에 HTTP 요청 메시지를 파싱한다. 그리고 그
			결과를 HttpServletRequest 객체에 담아서 제공한다.
		.- 임시 저장소 기능도 제공
			.- 저장 : request.setAttribute(name, value)
			.- 조회 : request.getAttribute(name)	
		.- 세션 관리 기능
			.- request.getSession(create:true)

	4. HttpServletRequest - 기본 사용법
		.- 필기노트 및 코드 참고

2022-03-12
	5. HTTP 요청 데이터 - 개요
		.- GET
			.- url주소에 ?username=han&age=32 같은 형식

		.- POST - HTML Form
			.- content-type:application/x-www-form-urlencoded
			.- 메세지 바디에 쿼리 파라미터 형식으로 전달 username=han&age=32
			.- 회원가입, 상품 주문, HTML Form 사용

		.- HTTP message body에 직접 데이터를 담아서
			.- HTTP API형식에서 주로 사용
			.- 데이터형식은 주로 JSON
			.- POST, PUT, PATCH
 
	6. HTTP 요청 데이터 - GET 쿼리 파라미터
		.- 만약 파라미터 이름이 중복이면??
			.- username=hello&username=han 이런식이면
			.- request.getParameterValues()를 사용해야함 (request.getParameter()는 단일 대상값만 가능하므로)
			.- 중복일때 request.getParameter()를 사용시 제일 앞에 파라미터가 반환됨
			
	7. HTTP 요청 데이터 -POST HTML Form
		.- request.getParameter() 는 GET URL 쿼리 파라미터 형식도 지원하고, POST HTML Form형식도 둘 다 지원
		.- 폼으로 데이터를 전송하는 형식을 application/x-www-form-urlencoded 라 한다
		.- Postman을 활용하면 굳이 html파일을 만들어서 거기서 전송하지 않아도 됨!! (이래서 쓰는거였군!)

	8. HTTP 요청 데이터 - API 메세지 바디 - 단순 텍스트
		.- inputStream은 byte 코드를 반환한다. byte 코드를 우리가 읽을 수 있는 문자(String)로 보려면 문자표
			(Charset)를 지정해주어야 한다. 여기서는 UTF_8 Charset을 지정해주었다

	9. HTTP 요청 데이터 - API 메세지 바디 - JSON
		.- JSON결과를 파싱해서 사용할 수 있는 자바 객체로 변환하려면, Jackson, Gson 같은 JSON변환 라이브러리를 추가해야함
		.- 스프링 부트로 Spring MVC를 선택하면 기본으로 Jackson라이브러리( ObjectMapper )를 함께 제공함

	10. HttpServletResponse - 기본 사용법
		.- HttpServletResponse의 역할
			.- HTTP 응답 메세지 생성 : HTTP응답코드 지정, 헤더 및 바디 생성
			.- 편의 기능 제공
				1_ Content-Type
				2_ 쿠키
				3_ Redirect
			.- hello.servlet.basic.response.ResponseHeaderServlet에서 코드 및 노트 확인

	11. HTTP 응답 데이터 - 단순 텍스트, HTML
		.- 단순 텍스트 응답
			.- 앞에서 했던 writer.println("ok")
		.- HTML 응답
		.- HTTP API - MessageBody JSON응답

		.- HTML 응답
			.- HTTP 응답으로 HTML을 반환할 때는 content-type을 text/html로 지정해야 함
			.- 실행 후 소스보기하면 text가 아닌 html형식으로 되어있는걸 확인

	12. HTTP 응답 데이터 - API JSON
		.- HTTP 응답으로 JSON을 반환할 때는 content-type을 application/json 로 지정


** 서블릿 종료**

2022-03-13
** 서블릿, JSP, MVC 패턴 **

	1. 회원 관리 웹 애플리케이션 요구사항
		.- 기본적인 핵심 코드 및 테스트코드 구현 완료

	2. 서블릿으로 회원 관리 웹 애플리케이션 만들기
		.- 서블릿 덕분에 정적인 html에서 벗어나 동적인 html요소를 추가할 수가 있었음!!
		.- 근데 매번 PrintWriter써서 할 순 없겠지??
		.- 그래서 나온게 템플릿 엔진임 --> html문서 안에서 아예 바꾸는게 더 편하다고 느꼈기 때문!!
		.- 템플릿 엔진에는 JSP, Thymeleaf, Freemarker, Velocity등이 있음
		.- JSP는 잘 안쓰이는 추세이고 요즘은 Thymeleaf를 많이 사용...하지만 나는 회사에서 jsp를 쓰기 때문에 잘 알고 있어야 함!


2022-03-16
	3. JSP로 회원 관리 웹 애플리케이션 만들기
		.- .jsp페이지를 만들면 처음 들어오는 <% %>첫줄이 알아서 jsp를 인식해줌
		.- url 요청시 ~~~.jsp로 요청해야함
		.- <% ~~ %> 안에 ~~요기에는 자바코드를 입력할 수 있음
		.- <%= ~~ %> 이렇게 쓰면 자바 코드를 출력할 수 있음	

		.- 이런식으로 근데 짠 jsp는 유지보수가 딱봐도 어려워보이지...? 그래서 나온게 MVC!!

2022-03-17
	4. MVC패턴 - 개요
		.- Controller : 비즈니스 로직을 모델에 담아서 전달
		.- Model : 데이터 전달 및 데이터 참조
		.- View : 화면 그리기 집중
		.- 근데 알고있듯이 Controller에서 다 처리하면 너무 복잡하지? 그래서 Service와 Repository가 있지

	5. MVC패턴 - 적용
		.- dispatcher.forward() : 다른 서블릿이나 JSP로 이동할수 있는 기능, 서버 내부에서 호출
		.- WEB-INF 경로 안에 있을시 외부에서 .jsp로 요청이 불가능
		.- redirect vs forward ??
			.- redirect : 실제 클라이언트(웹 브라우저)에 응답이 나갔다가, 클라이언트가 redirect경로로 다시 요청 -> 클라이언트가 인지 o, URL경로도 변경
			.- forward : 서버 내부에서 호출되므로 클라이언트가 인지 x
		
		.- 절대경로 vs 상대경로
			.- form action="/save"(절대경로) 와 action="save"(상대경로)차이
		
2022-03-20

	6. MVC패턴 - 한계
		.- 포워드 중복 : view로 이동하는 코드가 항상 중복임
		.- viewPath에 중복 : prefix : /WEB-INF/views , suffix : .jsp 가 중복
		.- 사용하지 않는 코드가 존재
		** .- 공통 처리가 어렵다 -> 공통 부분을 메서드로 만들어도 결국 한계가 있음 ** 이게 젤 문제

		.- 공통 처리 문제를 해결하려면 '프론트 컨틀롤러(Front Controller)패턴' 을 도입하면 해결할 수 있음

** 서블릿, JSP, MVC 패턴 종료**

** MVC 프레임워크 만들기 **

	1. 프론트 컨트롤러 - 개요
		.- FrontController 특징
			.1_ 프론트 컨트롤러 서블릿 하나로 클라이언트 요청을 받고, 그 요청에 맞는 컨트롤러를 찾아서 호출
			.2_ 공통처리가 가능하고 서블릿을 여기서만 사용해도 됨
		
		.- 스프링 웹 MVC와 프론트 컨트롤러
			.- FrontController , DispatcherServlet !!!

	2. 프론트 컨트롤러 도입 - v1 
		.- ControllerV1 인터페이스 구현
			.- 각 컨트롤러들은 이 인터페이스를 구현하면 된다. 
			.- 프론트 컨트롤러는 이 인터페이스를 호출해서 구현과 관계없이 로직의 일관성을 가져갈 수 있다

		.- 각 Controller들 생성 (V1,save, List 관련)
			.- private Map<String, ControllerV1> controllerMap = new HashMap<>(); 선언
			.- key : 매핑 URL ,  value : 호출될 컨트롤러\

2022-03-21
	3. View 분리 - v2
		.- myView를 생성해서 viewPath쪽에 중복되는 코드를 별도로 처리해줌
			.- String viewPath를 선언하고 생성자를 만든 후 void render클래스로 나머지 로직을 수행함
	
		.- 각 controller에서는 dispatcher.forward()를 직접 호출하지 않고 return을 new Myview(경로)로 반환하면 됨

2022-03-22	
	4. Model 추가 - v3 (어려우니까 두번 세번 들어라~)
		.- 서블릿 종속성 제거
			.- HttpServletRequest, HttpServletResponse 제거
		.- 뷰 이름 중복 제거
			.- /WEB-INF/views/new-form.jsp => new-form 으로 변경
			.- /WEB-INF/views/save-result.jsp => save-result
			.- /WEB-INF/views/members.jsp => members
			.- 이렇게 하면 향후 뷰의 폴더 위치가 변경되도 프론트컨트롤러만 수정하면 됨

		.- ModelView라는 class를 생성 여기엔 view 이름과 model 객체가 생성됨
		.- 글고 이제 모든 컨트롤러엔 서블릿 기술이 없음
		
2022-03-23
	5. 단순하고 실용적인 컨트롤러 - v4
		.- model 객체를 추가하고 각 컨트롤러에선 뷰의 논리 이름만 반환
		.- 프론트컨트롤러에서 Map<String, Object> model = new HashMap<>();    // 추가된 부분  
			

















