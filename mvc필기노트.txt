2022-03-07

** 웹 애플리케이션 이해 **
	1. 웹 서버, 웹 애플리케이션 서버
		.- 

	2. 서블릿
		.- 

2022-03-09

	3. 동시 요청 - 멀티 쓰레드
		.- 서블릿 객체를 누가 호출하지?? ---> '쓰레드'가 호출
		.- 쓰레드란?
			1_ 애플리케이션 코드를 하나하나 순차적으로 실행하는 것은 쓰레드
			2_ 자바 main메소드는 main이라는 쓰레드가 실행된다고 생각하면 됨
			3_ 쓰레드는 한번에 한개씩 호출

		.- 요청마다 쓰레드를 생성할 시 장단점
			1_ 장점
				.- 동시 요청을 처리 가능
				.- 리소스가 허용하는 범위 안까지 처리 가능
				.- 하나의 쓰레드가 지연되어도 다른 쓰레드에 지장이 없음
			2_ 단점
				.- 비용이 비싸고 응답속도가 늦어질 수 있음
				.- 컨텍스트 스위칭 비용이 발생
				.- 요청이 많을 시 cpu, 메모리 임계점을 넘어서 서버가 죽음 (== 쓰레드 생성에 제한이 없음)

		.- 쓰레드 풀
			.- 쓰레드가 필요할 시, 이미 생성된 쓰레드를 쓰레드 풀에서 꺼내서 사용
			.- 쓰레드 풀의 허용범위가 넘을 시 쓰레드 대기, 거절 (톰캣은 최대 200개가 기본 설정이고 변경 o)
			.- 사용을 종료하면 쓰레드 풀에 해당 쓰레드를 반납
			.- 장점
				1_ 쓰레드가 미리 생성되어 있기 때문에 효율이 좋고 응답시간이 빠름
				2_ 너무 많은 요청이 들어와도 기존 요청은 안전하게 처리가 가능
			-. 실무 팁
				1_ WAS의 주요 튜닝 포인트는 최대 쓰레드(max thread) 수 이다.
				2_ 최대 쓰레드 수가 너무 낮거나 높으면 효율이 좋지 못함
				3_ 장애 발생시 클라우드면 일단 서버부터 늘리고 튜닝, 클라우드가 아닐 시 열심히 튜닝
			.- 쓰레드 풀의 적정 숫자는?
				1_ 애플리케이션 로직의 복잡도, cpu, 메모리, IO 리소스 상황에 따라 다 다름...
				2_ 성능 테스트가 필요함 (툴 : 아파치ab, 제이미터, nGrinder등등)

		.- WAS의 멀티 쓰레드 지원의 핵심
			.- 멀티 쓰레드에 대한 부분은 WAS가 처리 ==> ** 개발자가 멀티 쓰레드 관련 코드를 신경쓰지 않아도 됨 **
			.- 편리하게 개발하되 싱글톤 객체(서블릿, 스프링 빈)는 주의해서 사용...

	4. HTML, HTTP, API, CSR, SSR
		1_ HTML
			.- 정적 리소스 (html, css, js, 이미지, 영상등..) 
			.- HTML 페이지 

			.- HTTP API
				.- HTML이 아니라 데이터를 전달
				.- 주로 JSON 형식 사용
				.- 다양한 시스템에서 호출
				.- 데이터만 주고 받음, UI화면이 필요하면 클라이언트가 별도로 처리
				.- 앱, 웹 클라이언트, 서버 to 서버

			.- HTTP API 다양한 시스템 연동
				.- 주로 JSON 형태로 데이터 통신
				.- UI 클라이언트 접점
					.- 앱 클라이언트 (아이폰, 안드로이드, PC 앱)
					.- 웹 브라우저에서 자바스크립트를 통한 HTTP API 호출
					.- 리액트, 뷰 같은 웹 클라이언트
				.- 서버 to 서버
					.- 주문 서버 -> 결제 서버
					.- 기업간 데이터 통신


		2_ SSR - 서버 사이드 랜더링
			.- 서버에서 최종 HTML을 생성해서 클라이언트에 전달
			.- 주로 정적인 화면에 사용
			.- 관련기술 : JSP, 타임리프 -> 백앤드 개발자!!

		3_ CSR -  클라이언트 사이드 랜더링
			.- HTML 결과를 자바스크립트를 이용해 웹 브라우저에서 동적으로 생성해서 적용
			.- 주로 동적인 화면에 사용, 웹 환경을 마치 앱 처럼 필요한 부분부분 변경할 수 있음
			.- 예_ 구글 지도, Gmail, 구글 캘린더
			.- 관련기술 : React, Vue.js -> 프론트 개발자 !!

		** 참고
			.- React, Vue.js를 CSR + SSR 동시에 지원하는 웹 프래임워크도 존재
			.- SSR을 사용하더라도, JS를 사용해서 화면 일부를 동적으로 변경 가능

		4_ 백엔드 개발자 입장에서 UI 기술 어디까지 알면 좋을까?
			.- 백엔드 - 서버 사이드 랜더링 기술
				.- JSP, 타임리프
				.- 화면이 정적이고, 복잡하지 않을 때 사용
				.- 백엔드 개발자는 서버 사이드 랜더링 기술 학습 필수!!!

			.- 웹 프론트엔드 - 클라이언트 사이드 랜더링 기술
				.- 리액트, 뷰
				.- 복잡하고 동적인 UI 사용
				.- 웹 프론트앤드 개발자의 전문 분야
			.- 백엔드 개발자에게 있어서 CSR은 옵션!! (서버, DB, 인프라등등 많은 기술을 먼저 알아야 하겠지?)


	5. 자바의 역사
		1_ 스프링 웹 기술의 분화
			.- Web Servlet - Spring MVC
			.- Web Reactive - Spring WebFlux

		2_ HTML을 편리하게 생성하는 뷰 기능
			.- JSP
				.- 속도 느림, 기능 부족
			.- 프리마커(Freemarker), 벨로시티(Velocity)
				.- 속도 문제 해결, 다양한 기능
			.- 타임리프(Thymeleaf)
				.- 내추럴 탬플릿 : HTML의 모양을 유지하면서 뷰 템플릿 적용 가능
				.- 스프링 MVC와 강력한 기능 통합
				.- 최선의 선택...!


** 웹 애플리케이션 이해 종료 **

** 서블릿 **
	1. 프로젝트 생성
		.- 보통은 Jar파일로 하면되는데 JSP공부 때문에 War파일로 생성
		.- 설치관련은 이제 어렵진 않고 환경설정도 lombok이랑 annotation이랑 gradle만 바꿔주면 되니까 아직은 쉬움

2022-03-10

	2. Hello 서블릿
		.- 메인 메소드에 @ServletComponentScan를 추가 ==> 서블릿 자동 등록을 위해서
		.- HelloServlet class에 extends HttpServlet추가, @WebServlet(name = "helloServlet", urlPatterns = "/hello") 추가
							.- /hello라는 url요청 시 helloServlet이라는 class로 ㄱㄱ

		.- ctrl + o 누르고 service검색해서 자물쇠 잠긴거 누르면 오버라이딩 자동으로 됨
		.- 첨에 변수명 req, resp로 되어있는거 request, response로 변경

		.- request.getParameter("username"); 알고
		.- response.setContentType("text/plain"); 헤더에 들어가는 타입
        		.- response.setCharacterEncoding("utf-8"); 헤더에 들어가서 한글 인코딩
        		.- response.getWriter().write("hello " + username); body에 출력

		** HTTP 요청 메세지 로그 확인하기 **
		.- application.properties에 logging.level.org.apache.coyote.http11=debug 추가
		.- 참고로 개발서버에서쓰지 운영서버에선 쓰지않음

	3. HttpServletRequest 개요
		.- 서블릿은 개발자가 HTTP 요청 메시지를 편리하게 사용할 수 있도록 개발자 대신에 HTTP 요청 메시지를 파싱한다. 그리고 그
			결과를 HttpServletRequest 객체에 담아서 제공한다.
		.- 임시 저장소 기능도 제공
			.- 저장 : request.setAttribute(name, value)
			.- 조회 : request.getAttribute(name)	
		.- 세션 관리 기능
			.- request.getSession(create:true)

	4.
 
				
			

















